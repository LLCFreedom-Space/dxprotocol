// DXProtocol
// Copyright (C) 2022  FREEDOM SPACE, LLC

//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Affero General Public License as published
//  by the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Affero General Public License for more details.
//
//  You should have received a copy of the GNU Affero General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.

//
//  DXProtocolTests.swift
//  DealogXTests
//
//  Created by Andriy Vasyk on 13.12.2022.
//

import XCTest
@testable import DXProtocol

final class DXProtocolTests: XCTestCase {
    // MARK: - Tests

    func testCalculateKeyAgreement() throws {
        let expectedAlicePublicKeyData = Data([
            0x1b, 0xb7, 0x59, 0x66, 0xf2, 0xe9, 0x3a, 0x36, 0x91, 0xdf, 0xff, 0x94, 0x2b, 0xb2,
            0xa4, 0x66, 0xa1, 0xc0, 0x8b, 0x8d, 0x78, 0xca, 0x3f, 0x4d, 0x6d, 0xf8, 0xb8, 0xbf,
            0xa2, 0xe4, 0xee, 0x28
        ])
        let alicePrivateKeyData = Data([
            0xc8, 0x06, 0x43, 0x9d, 0xc9, 0xd2, 0xc4, 0x76, 0xff, 0xed, 0x8f, 0x25, 0x80, 0xc0,
            0x88, 0x8d, 0x58, 0xab, 0x40, 0x6b, 0xf7, 0xae, 0x36, 0x98, 0x87, 0x90, 0x21, 0xb9,
            0x6b, 0xb4, 0xbf, 0x59
        ])
        let expectedBobPublicKeyData = Data([
            0x65, 0x36, 0x14, 0x99, 0x3d, 0x2b, 0x15, 0xee, 0x9e, 0x5f, 0xd3, 0xd8, 0x6c, 0xe7,
            0x19, 0xef, 0x4e, 0xc1, 0xda, 0xae, 0x18, 0x86, 0xa8, 0x7b, 0x3f, 0x5f, 0xa9, 0x56,
            0x5a, 0x27, 0xa2, 0x2f
        ])
        let bobPrivateKeyData = Data([
            0xb0, 0x3b, 0x34, 0xc3, 0x3a, 0x1c, 0x44, 0xf2, 0x25, 0xb6, 0x62, 0xd2, 0xbf, 0x48,
            0x59, 0xb8, 0x13, 0x54, 0x11, 0xfa, 0x7b, 0x03, 0x86, 0xd4, 0x5f, 0xb7, 0x5d, 0xc5,
            0xb9, 0x1b, 0x44, 0x66
        ])
        let sharedSecret = Data([
            0x32, 0x5f, 0x23, 0x93, 0x28, 0x94, 0x1c, 0xed, 0x6e, 0x67, 0x3b, 0x86, 0xba, 0x41,
            0x01, 0x74, 0x48, 0xe9, 0x9b, 0x64, 0x9a, 0x9c, 0x38, 0x06, 0xc1, 0xdd, 0x7c, 0xa4,
            0xc4, 0x77, 0xe6, 0x29
        ])

        let alicePrivateKey = try PrivateKey(data: alicePrivateKeyData)
        let bobPrivateKey = try PrivateKey(data: bobPrivateKeyData)
        let alicePublicKey = try alicePrivateKey.getAgreementPublicKey()
        let bobPublicKey = try bobPrivateKey.getAgreementPublicKey()

        XCTAssertEqual(expectedAlicePublicKeyData, alicePublicKey.data)
        XCTAssertEqual(expectedBobPublicKeyData, bobPublicKey.data)

        let aliceComputedSecretData = try alicePrivateKey.calculateKeyAgreement(with: bobPublicKey)
        let bobComputedSecretData = try bobPrivateKey.calculateKeyAgreement(with: alicePublicKey)

        XCTAssertEqual(sharedSecret, aliceComputedSecretData)
        XCTAssertEqual(sharedSecret, bobComputedSecretData)
    }

    func testRatchetChainKeyDerivation() throws {
        let firstKeyData = Data([
            0x8a, 0xb7, 0x2d, 0x6f, 0x4c, 0xc5, 0xac, 0x0d, 0x38, 0x7e, 0xaf, 0x46, 0x33, 0x78,
            0xdd, 0xb2, 0x8e, 0xdd, 0x07, 0x38, 0x5b, 0x1c, 0xb0, 0x12, 0x50, 0xc7, 0x15, 0x98,
            0x2e, 0x7a, 0xd4, 0x8f
        ])

        let expectedCipherKeyData = Data([
            0x1d, 0x9c, 0x54, 0xf2, 0x3c, 0xfc, 0x18, 0xcf, 0xd1, 0xa9, 0xa6, 0x2b, 0x3b, 0x5e,
            0xc4, 0x1a, 0x77, 0xe5, 0xa7, 0x50, 0xa4, 0x49, 0x7f, 0xb8, 0x7b, 0x85, 0x48, 0xeb,
            0xc9, 0x9e, 0xfc, 0x44
        ])

        let expectedMacKeyData = Data([
            0x38, 0xdb, 0x25, 0xb8, 0xeb, 0xd9, 0x18, 0x50, 0xaf, 0xd8, 0xad, 0x1a, 0x22, 0xe0,
            0x43, 0x5a, 0x7f, 0xf4, 0xe0, 0x16, 0x6a, 0x2e, 0x9a, 0xe8, 0x48, 0xb0, 0x15, 0xf1,
            0x44, 0x57, 0x66, 0xbd
        ])

        let expectedNextChainKeyData = Data([
            0x28, 0xe8, 0xf8, 0xfe, 0xe5, 0x4b, 0x80, 0x1e, 0xef, 0x7c, 0x5c, 0xfb, 0x2f, 0x17,
            0xf3, 0x2c, 0x7b, 0x33, 0x44, 0x85, 0xbb, 0xb7, 0x0f, 0xac, 0x6e, 0xc1, 0x03, 0x42,
            0xa2, 0x46, 0xd1, 0x5d
        ])

        let chainKey = RatchetChainKey(data: firstKeyData, index: 0)
        XCTAssertEqual(firstKeyData, chainKey.data)
        XCTAssertEqual(0, chainKey.index)

        let messageKeys = try chainKey.messageKeys()
        XCTAssertEqual(0, messageKeys.index)
        XCTAssertEqual(expectedCipherKeyData, messageKeys.cipherKey)
        XCTAssertEqual(expectedMacKeyData, messageKeys.macKey)

        let nextChainKey = chainKey.nextChainKey()
        XCTAssertEqual(1, nextChainKey.index)
        XCTAssertEqual(expectedNextChainKeyData, nextChainKey.data)
        XCTAssertEqual(1, try nextChainKey.messageKeys().index)
    }
}
