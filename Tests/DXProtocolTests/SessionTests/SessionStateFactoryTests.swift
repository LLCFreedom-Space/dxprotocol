// DXProtocol
// Copyright (C) 2022  FREEDOM SPACE, LLC

//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Affero General Public License as published
//  by the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Affero General Public License for more details.
//
//  You should have received a copy of the GNU Affero General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.

//
//  SessionStateFactoryTests.swift
//  DealogXTests
//
//  Created by Andriy Vasyk on 27.12.2022.
//

import Foundation
import XCTest
@testable import DXProtocol

// swiftlint:disable function_body_length
final class SessionStateFactoryTests: XCTestCase {
    func testCreateBobSessionState() throws {
        let bobEphemeralPublicData = Data([
            0x2c, 0xb4, 0x97, 0x76, 0xb8, 0x77, 0x02, 0x05, 0x74, 0x5a, 0x3a, 0x6e, 0x24, 0xf5, 0x79,
            0xcd, 0xb4, 0xba, 0x7a, 0x89, 0x04, 0x10, 0x05, 0x92, 0x8e, 0xbb, 0xad, 0xc9, 0xc0, 0x5a,
            0xd4, 0x58
        ])

        let bobEphemeralPrivateData = Data([
            0xa1, 0xca, 0xb4, 0x8f, 0x7c, 0x89, 0x3f, 0xaf, 0xa9, 0x88, 0x0a, 0x28, 0xc3, 0xb4, 0x99,
            0x9d, 0x28, 0xd6, 0x32, 0x95, 0x62, 0xd2, 0x7a, 0x4e, 0xa4, 0xe2, 0x2e, 0x9f, 0xf1, 0xbd,
            0xd6, 0x5a
        ])

        let bobIdentityKeyPublicData = Data([
            0xf1, 0xf4, 0x38, 0x74, 0xf6, 0x96, 0x69, 0x56, 0xc2, 0xdd, 0x47, 0x3f, 0x8f, 0xa1, 0x5a,
            0xde, 0xb7, 0x1d, 0x1c, 0xb9, 0x91, 0xb2, 0x34, 0x16, 0x92, 0x32, 0x4c, 0xef, 0xb1, 0xc5,
            0xe6, 0x26
        ])

        let bobIdentityKeyPrivateData = Data([
            0x48, 0x75, 0xcc, 0x69, 0xdd, 0xf8, 0xea, 0x07, 0x19, 0xec, 0x94, 0x7d, 0x61, 0x08, 0x11,
            0x35, 0x86, 0x8d, 0x5f, 0xd8, 0x01, 0xf0, 0x2c, 0x02, 0x25, 0xe5, 0x16, 0xdf, 0x21, 0x56,
            0x60, 0x5e
        ])

        let aliceBaseKeyPublicData = Data([
            0x47, 0x2d, 0x1f, 0xb1, 0xa9, 0x86, 0x2c, 0x3a, 0xf6, 0xbe, 0xac, 0xa8, 0x92, 0x02, 0x77,
            0xe2, 0xb2, 0x6f, 0x4a, 0x79, 0x21, 0x3e, 0xc7, 0xc9, 0x06, 0xae, 0xb3, 0x5e, 0x03, 0xcf,
            0x89, 0x50
        ])

        let aliceIdentityKeyPublicData = Data([
            0xb4, 0xa8, 0x45, 0x56, 0x60, 0xad, 0xa6, 0x5b, 0x40, 0x10, 0x07, 0xf6, 0x15, 0xe6, 0x54,
            0x04, 0x17, 0x46, 0x43, 0x2e, 0x33, 0x39, 0xc6, 0x87, 0x51, 0x49, 0xbc, 0xee, 0xfc, 0xb4,
            0x2b, 0x4a
        ])

        let bobSignedPreKeyPublicData = Data([
            0xac, 0x24, 0x8a, 0x8f, 0x26, 0x3b, 0xe6, 0x86, 0x35, 0x76, 0xeb, 0x03, 0x62, 0xe2, 0x8c,
            0x82, 0x8f, 0x01, 0x07, 0xa3, 0x37, 0x9d, 0x34, 0xba, 0xb1, 0x58, 0x6b, 0xf8, 0xc7, 0x70,
            0xcd, 0x67
        ])

        let bobSignedPreKeyPrivateData = Data([
            0x58, 0x39, 0x00, 0x13, 0x1f, 0xb7, 0x27, 0x99, 0x8b, 0x78, 0x03, 0xfe, 0x6a, 0xc2, 0x2c,
            0xc5, 0x91, 0xf3, 0x42, 0xe4, 0xe4, 0x2a, 0x8c, 0x8d, 0x5d, 0x78, 0x19, 0x42, 0x09, 0xb8,
            0xd2, 0x53
        ])

        let expectedSenderChainKeyData = Data([
            0xc4, 0xe2, 0x11, 0xc6, 0x8c, 0xb4, 0xcf, 0xf8, 0x59, 0xc7, 0x37, 0xb3, 0xb2, 0x6b, 0x08,
            0xca, 0xe3, 0x27, 0x2f, 0xbe, 0x37, 0xa9, 0xb3, 0xf5, 0x6f, 0xf2, 0x0d, 0x45, 0xe5, 0x03,
            0x17, 0x9d
        ])

        let bobIdentityKeyPublic = try PublicKey(data: bobIdentityKeyPublicData)
        let bobIdentityKeyPrivate = try PrivateKey(data: bobIdentityKeyPrivateData)
        let bobIdentityKeyPair = IdentityKeyPair(
                publicKey: bobIdentityKeyPublic,
                privateKey: bobIdentityKeyPrivate,
                signingPublicKey: try bobIdentityKeyPrivate.getSigningPublicKey())

        let bobSignedPreKeyPublic = try PublicKey(data: bobSignedPreKeyPublicData)
        let bobSignedPreKeyPrivate = try PrivateKey(data: bobSignedPreKeyPrivateData)
        let bobSignedPreKeyPair = SignedPreKeyPair(
                id: UUID(),
                date: Date(),
                publicKey: bobSignedPreKeyPublic,
                privateKey: bobSignedPreKeyPrivate,
                signature: Data())

        let bobEphemeralPublicKey = try PublicKey(data: bobEphemeralPublicData)
        let bobEphemeralPrivateKey = try PrivateKey(data: bobEphemeralPrivateData)
        let bobEphemeralKeyPair = KeyPair(
                publicKey: bobEphemeralPublicKey,
                privateKey: bobEphemeralPrivateKey)

        let aliceIdentityKey = IdentityKeyPublic(publicKey: try PublicKey(data: aliceIdentityKeyPublicData))
        let aliceBaseKey = try PublicKey(data: aliceBaseKeyPublicData)

        var state = try SessionStateFactory.createBobSessionState(
                bobIdentityKeyPair: bobIdentityKeyPair,
                bobSignedPreKeyPair: bobSignedPreKeyPair,
                bobOneTimePreKeyPair: nil,
                bobRatchetKeyPair: bobEphemeralKeyPair,
                aliceIdentityKey: aliceIdentityKey,
                aliceBaseKey: aliceBaseKey)

        XCTAssertEqual(bobIdentityKeyPair.publicKey, state.ourLocalIdentityPublic.publicKey)

        XCTAssertEqual(bobEphemeralKeyPair.publicKey, state.senderChain.ratchetKeyPair.publicKey)
        XCTAssertEqual(bobEphemeralKeyPair.privateKey, state.senderChain.ratchetKeyPair.privateKey)

        XCTAssertEqual(aliceIdentityKey, state.theirRemoteIdentityPublic)
        XCTAssertEqual(aliceBaseKey, state.aliceBaseKey)
        XCTAssertEqual(state.senderChain.chainKey.data, expectedSenderChainKeyData)

        // Receiver Chains should be empty in fresh Bob's session state
        XCTAssertTrue(state.receiverChains.isEmpty)

        let aliceRatchetKeyPublicData = Data([
            0x19, 0xbc, 0x4e, 0x43, 0x27, 0x63, 0x6a, 0x20, 0xb5, 0x4e, 0x96, 0x13, 0xbb, 0x43, 0x8d,
            0xcd, 0xe1, 0x1c, 0xab, 0xfb, 0x8f, 0xfd, 0x66, 0xf4, 0x95, 0x86, 0xb4, 0x6f, 0x7f, 0x2c,
            0xc9, 0x4
        ])
        let expectedReceiverChainKeyData = Data([
            0x65, 0x30, 0xfd, 0xd5, 0xed, 0xe5, 0xc9, 0xad, 0x6d, 0x15, 0x65, 0xce, 0x1b, 0x8e, 0x55,
            0xc1, 0x58, 0x66, 0x1c, 0x0f, 0x1f, 0x99, 0x32, 0xe7, 0x2d, 0xf5, 0x40, 0x66, 0x51, 0xbb,
            0x4c, 0xd6
        ])
        let aliceEphemeralKey = try PublicKey(data: aliceRatchetKeyPublicData)
        let receiverChainKey = try state.getOrCreateReceiverChainKey(theirEphemeral: aliceEphemeralKey)
        XCTAssertEqual(receiverChainKey.data, expectedReceiverChainKeyData)

        let expectedCipherKeyData = Data([
            0x3c, 0xca, 0xe1, 0x14, 0x0c, 0x44, 0xc3, 0x2f, 0x39, 0x6c, 0x8c, 0x28, 0xde, 0x52, 0xd7,
            0x53, 0x9b, 0xaa, 0xa2, 0x83, 0x7f, 0x00, 0xec, 0xe9, 0x87, 0x9a, 0x4f, 0xbd, 0x85, 0x30,
            0xc5, 0x59
        ])
        let expectedInitializationVectorData = Data([
            0x9c, 0x98, 0x77, 0xc0, 0x85, 0xd3, 0x7f, 0x06, 0x84, 0xff, 0x9d, 0xb8, 0x62, 0xc1, 0xea, 0xb1
        ])
        let expectedMacKeyData = Data([
            0x5c, 0x84, 0x82, 0x87, 0xa5, 0x7e, 0xcf, 0xa0, 0x2a, 0x80, 0xd7, 0x26, 0xc2, 0x38, 0x9e,
            0xf5, 0x66, 0x2e, 0xe7, 0xc5, 0xc7, 0xae, 0xfd, 0x9d, 0xe8, 0x93, 0x57, 0x95, 0x84, 0x0d,
            0xbd, 0x22
        ])

        let messageKeys = try receiverChainKey.messageKeys()
        XCTAssertEqual(messageKeys.cipherKey, expectedCipherKeyData)
        XCTAssertEqual(messageKeys.initializationVector, expectedInitializationVectorData)
        XCTAssertEqual(messageKeys.macKey, expectedMacKeyData)
    }

    func testCreateAliceSessionState() throws {
        CryptoService.use { MockCryptoService() }

        let bobEphemeralPublicKeyData = Data([
            0x2c, 0xb4, 0x97, 0x76, 0xb8, 0x77, 0x02, 0x05, 0x74, 0x5a, 0x3a, 0x6e, 0x24, 0xf5, 0x79,
            0xcd, 0xb4, 0xba, 0x7a, 0x89, 0x04, 0x10, 0x05, 0x92, 0x8e, 0xbb, 0xad, 0xc9, 0xc0, 0x5a,
            0xd4, 0x58
        ])

        let bobIdentityKeyPublicData = Data([
            0xf1, 0xf4, 0x38, 0x74, 0xf6, 0x96, 0x69, 0x56, 0xc2, 0xdd, 0x47, 0x3f, 0x8f, 0xa1, 0x5a,
            0xde, 0xb7, 0x1d, 0x1c, 0xb9, 0x91, 0xb2, 0x34, 0x16, 0x92, 0x32, 0x4c, 0xef, 0xb1, 0xc5,
            0xe6, 0x26
        ])

        let aliceBaseKeyPublicData = Data([
            0x47, 0x2d, 0x1f, 0xb1, 0xa9, 0x86, 0x2c, 0x3a, 0xf6, 0xbe, 0xac, 0xa8, 0x92, 0x02, 0x77,
            0xe2, 0xb2, 0x6f, 0x4a, 0x79, 0x21, 0x3e, 0xc7, 0xc9, 0x06, 0xae, 0xb3, 0x5e, 0x03, 0xcf,
            0x89, 0x50
        ])

        let aliceBaseKeyPrivateData = Data([
            0x11, 0xae, 0x7c, 0x64, 0xd1, 0xe6, 0x1c, 0xd5, 0x96, 0xb7, 0x6a, 0x0d, 0xb5, 0x01, 0x26,
            0x73, 0x39, 0x1c, 0xae, 0x66, 0xed, 0xbf, 0xcf, 0x07, 0x3b, 0x4d, 0xa8, 0x05, 0x16, 0xa4,
            0x74, 0x49
        ])

        let bobSignedPreKeyPublicData = Data([
            0xac, 0x24, 0x8a, 0x8f, 0x26, 0x3b, 0xe6, 0x86, 0x35, 0x76, 0xeb, 0x03, 0x62, 0xe2, 0x8c,
            0x82, 0x8f, 0x01, 0x07, 0xa3, 0x37, 0x9d, 0x34, 0xba, 0xb1, 0x58, 0x6b, 0xf8, 0xc7, 0x70,
            0xcd, 0x67
        ])

        let aliceIdentityKeyPairPublicData = Data([
            0xb4, 0xa8, 0x45, 0x56, 0x60, 0xad, 0xa6, 0x5b, 0x40, 0x10, 0x07, 0xf6, 0x15, 0xe6, 0x54,
            0x04, 0x17, 0x46, 0x43, 0x2e, 0x33, 0x39, 0xc6, 0x87, 0x51, 0x49, 0xbc, 0xee, 0xfc, 0xb4,
            0x2b, 0x4a
        ])

        let aliceIdentityKeyPairPrivateData = Data([
            0x90, 0x40, 0xf0, 0xd4, 0xe0, 0x9c, 0xf3, 0x8f, 0x6d, 0xc7, 0xc1, 0x37, 0x79, 0xc9, 0x08,
            0xc0, 0x15, 0xa1, 0xda, 0x4f, 0xa7, 0x87, 0x37, 0xa0, 0x80, 0xeb, 0x0a, 0x6f, 0x4f, 0x5f,
            0x8f, 0x58
        ])

        let aliceMockSendingRatchetPrivateKeyData = Data([
            0x58, 0x71, 0x9c, 0x34, 0x55, 0xbd, 0xc2, 0xb3, 0x39, 0x58, 0x5c, 0xe3, 0x18, 0x33, 0x78,
            0xc3, 0x4d, 0x6d, 0x73, 0x02, 0xb7, 0xcd, 0x43, 0x59, 0xd7, 0x8c, 0xe6, 0x1a, 0x5d, 0x48,
            0x5b, 0x6d
        ])

        let expectedReceiverChainKeyData = Data([
            0x26, 0xc7, 0xca, 0xbb, 0x29, 0xcb, 0xf6, 0xda, 0xdb, 0x0d, 0xb4, 0x5b, 0xac, 0x0a, 0x41,
            0x75, 0xe2, 0x69, 0x18, 0x73, 0xf4, 0x64, 0x1a, 0xe8, 0x5f, 0xe8, 0x80, 0xa8, 0x66, 0x9b,
            0xb8, 0x82
        ])

        let expectedSenderChainKeyData = Data([
            0x51, 0x3c, 0xd3, 0xdd, 0xb2, 0x86, 0x93, 0xfd, 0x0b, 0xf6, 0x72, 0xd7, 0xf4, 0x01, 0x2a,
            0xeb, 0x08, 0x2d, 0x73, 0xbd, 0x68, 0x75, 0xb5, 0x57, 0x0b, 0x65, 0x41, 0x78, 0xd2, 0x3d,
            0x8f, 0x73
        ])

        let aliceIdentityPublicKey = try PublicKey(data: aliceIdentityKeyPairPublicData)
        let aliceIdentityPrivateKey = try PrivateKey(data: aliceIdentityKeyPairPrivateData)
        let aliceIdentityKeyPair = IdentityKeyPair(
                publicKey: aliceIdentityPublicKey,
                privateKey: aliceIdentityPrivateKey,
                signingPublicKey: try aliceIdentityPrivateKey.getSigningPublicKey())

        let aliceBaseKeyPublic = try PublicKey(data: aliceBaseKeyPublicData)
        let aliceBaseKeyPrivate = try PrivateKey(data: aliceBaseKeyPrivateData)
        let aliceBaseKeyPair = KeyPair(
                publicKey: aliceBaseKeyPublic,
                privateKey: aliceBaseKeyPrivate)

        let bobIdentityKey = IdentityKeyPublic(publicKey: try PublicKey(data: bobIdentityKeyPublicData))

        let bobSignedPreKeyPublic = SignedPreKeyPublic(
                id: UUID(),
                publicKey: try PublicKey(data: bobSignedPreKeyPublicData),
                signature: Data())

        let bobRatchetKey = try PublicKey(data: bobEphemeralPublicKeyData)
        MockCryptoService.mockRawPrivateKeys = [aliceMockSendingRatchetPrivateKeyData]
        let state = try SessionStateFactory.createAliceSessionState(
                aliceIdentityKeyPair: aliceIdentityKeyPair,
                aliceBaseKeyPair: aliceBaseKeyPair,
                bobIdentityKey: bobIdentityKey,
                bobSignedPreKeyPublic: bobSignedPreKeyPublic,
                bobOneTimePreKey: nil,
                bobRatchetKey: bobRatchetKey)

        XCTAssertEqual(aliceIdentityKeyPair.publicKey, state.ourLocalIdentityPublic.publicKey)

        XCTAssertEqual(bobIdentityKey, state.theirRemoteIdentityPublic)
        XCTAssertEqual(aliceBaseKeyPair.publicKey, state.aliceBaseKey)

        XCTAssertEqual(1, state.receiverChains.count)
        XCTAssertEqual(expectedReceiverChainKeyData, state.receiverChains.first?.chainKey.data)
        XCTAssertEqual(bobRatchetKey, state.receiverChains.first?.ratchetKey)

        XCTAssertEqual(
                state.senderChain.ratchetKeyPair.privateKey.data.count,
                aliceMockSendingRatchetPrivateKeyData.count)
        XCTAssertEqual(state.senderChain.chainKey.data.count, expectedSenderChainKeyData.count)

        XCTAssertEqual(state.senderChain.chainKey.index, 0)

        let expectedCipherKeyData = Data([
            0x33, 0xd6, 0xec, 0x01, 0xa3, 0xb9, 0x2d, 0x9e, 0x5e, 0x0f, 0x98, 0x51, 0xc1, 0x67, 0x05,
            0x31, 0xcb, 0x76, 0xf8, 0x09, 0x75, 0x0c, 0x58, 0xf1, 0xd1, 0x05, 0x23, 0xe7, 0x55, 0x17,
            0x0e, 0xdc
        ])
        let expectedInitializationVectorData = Data([
            0x06, 0x83, 0x68, 0x19, 0x66, 0xc6, 0xa9, 0xe8, 0x92, 0x4a, 0x4b, 0x25, 0xc3, 0x62, 0x9c, 0x59
        ])
        let expectedMacKeyData = Data([
            0xe6, 0xd2, 0x57, 0x85, 0x35, 0x7b, 0x73, 0x3f, 0xf0, 0x28, 0x3c, 0x69, 0xd2, 0xae, 0x9c,
            0x49, 0x05, 0xe2, 0x32, 0xfa, 0xe4, 0xfa, 0x0d, 0xe1, 0x54, 0x21, 0x6b, 0xcd, 0x68, 0x7f,
            0xe6, 0x4c
        ])

        let messageKeys = try state.senderChain.chainKey.messageKeys()
        XCTAssertEqual(messageKeys.cipherKey.count, expectedCipherKeyData.count)
        XCTAssertEqual(messageKeys.initializationVector.count, expectedInitializationVectorData.count)
        XCTAssertEqual(messageKeys.macKey.count, expectedMacKeyData.count)
    }
}
// swiftlint:enable function_body_length
