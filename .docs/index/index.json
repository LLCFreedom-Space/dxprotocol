{"interfaceLanguages":{"swift":[{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/cryptoserviceprotocol\/qccaespadcbcdecrypt(key:initializationvector:cyphertext:)","title":"func QCCAESPadCBCDecrypt(key: [UInt8], initializationVector: [UInt8], cyphertext: [UInt8]) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoserviceprotocol\/qccaespadcbcencrypt(key:initializationvector:plaintext:)","title":"func QCCAESPadCBCEncrypt(key: [UInt8], initializationVector: [UInt8], plaintext: [UInt8]) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoserviceprotocol\/derivekey(inputkeymaterial:info:outputbytecount:)","title":"func deriveKey(inputKeyMaterial: Data, info: Data, outputByteCount: Int) -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoserviceprotocol\/derivekey(inputkeymaterial:salt:info:outputbytecount:)","title":"func deriveKey(inputKeyMaterial: Data, salt: Data, info: Data, outputByteCount: Int) -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoserviceprotocol\/generateprivatekeyrawdata()","title":"func generatePrivateKeyRawData() -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoserviceprotocol\/hmacsha256(for:with:)","title":"func hmacSHA256(for: Data, with: Data) -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoserviceprotocol\/isvalidsignature(_:for:publickey:)","title":"func isValidSignature(Data, for: Data, publicKey: Data) throws -> Bool","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoserviceprotocol\/performkeyagreement(of:with:)","title":"func performKeyAgreement(of: Data, with: Data) throws -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoserviceprotocol\/publicagreementkeydatafor(privatekeydata:)","title":"func publicAgreementKeyDataFor(privateKeyData: Data) throws -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoserviceprotocol\/publicsigningkeydatafor(privatekeydata:)","title":"func publicSigningKeyDataFor(privateKeyData: Data) throws -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoserviceprotocol\/signature(for:with:)","title":"func signature(for: Data, with: Data) throws -> Data","type":"method"}],"path":"\/documentation\/dxprotocol\/cryptoserviceprotocol","title":"CryptoServiceProtocol","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeystorable\/identity(for:)","title":"func identity(for: ProtocolAddress) throws -> IdentityKeyPublic?","type":"method"},{"path":"\/documentation\/dxprotocol\/identitykeystorable\/identitykeypair()","title":"func identityKeyPair() throws -> IdentityKeyPair","type":"method"},{"path":"\/documentation\/dxprotocol\/identitykeystorable\/istrustedidentity(_:for:direction:)","title":"func isTrustedIdentity(IdentityKeyPublic, for: ProtocolAddress, direction: DirectionType) throws -> Bool","type":"method"},{"path":"\/documentation\/dxprotocol\/identitykeystorable\/localregistrationid()","title":"func localRegistrationId() throws -> UUID","type":"method"},{"path":"\/documentation\/dxprotocol\/identitykeystorable\/saveidentity(_:for:)","title":"func saveIdentity(IdentityKeyPublic, for: ProtocolAddress) throws -> Bool","type":"method"}],"path":"\/documentation\/dxprotocol\/identitykeystorable","title":"IdentityKeyStorable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeystorable\/loadprekey(id:)","title":"func loadPreKey(id: UUID) throws -> OneTimePreKeyPair","type":"method"},{"path":"\/documentation\/dxprotocol\/prekeystorable\/removeallprekeys()","title":"func removeAllPreKeys() throws","type":"method"},{"path":"\/documentation\/dxprotocol\/prekeystorable\/removeprekey(id:)","title":"func removePreKey(id: UUID) throws","type":"method"},{"path":"\/documentation\/dxprotocol\/prekeystorable\/storeprekey(_:id:)","title":"func storePreKey(OneTimePreKeyPair, id: UUID) throws","type":"method"}],"path":"\/documentation\/dxprotocol\/prekeystorable","title":"PreKeyStorable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/sessionstorable\/loadexistingsessions(for:)","title":"func loadExistingSessions(for: [ProtocolAddress]) throws -> [Session]","type":"method"},{"path":"\/documentation\/dxprotocol\/sessionstorable\/loadsession(for:)","title":"func loadSession(for: ProtocolAddress) throws -> Session?","type":"method"},{"path":"\/documentation\/dxprotocol\/sessionstorable\/storesession(_:for:)","title":"func storeSession(Session, for: ProtocolAddress) throws","type":"method"}],"path":"\/documentation\/dxprotocol\/sessionstorable","title":"SessionStorable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeystorable\/loadsignedprekey(id:)","title":"func loadSignedPreKey(id: UUID) throws -> SignedPreKeyPair","type":"method"},{"path":"\/documentation\/dxprotocol\/signedprekeystorable\/removeallsignedprekeys()","title":"func removeAllSignedPreKeys() throws","type":"method"},{"path":"\/documentation\/dxprotocol\/signedprekeystorable\/removesignedprekey(id:)","title":"func removeSignedPreKey(id: UUID) throws","type":"method"},{"path":"\/documentation\/dxprotocol\/signedprekeystorable\/storesignedprekey(_:id:)","title":"func storeSignedPreKey(SignedPreKeyPair, id: UUID) throws","type":"method"}],"path":"\/documentation\/dxprotocol\/signedprekeystorable","title":"SignedPreKeyStorable","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/init(key:mackey:digest:)-7ushh","title":"init(key: Data, macKey: Data, digest: Data)","type":"init"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/init(key:mackey:digest:)-pexr","title":"init(key: SymmetricKey, macKey: SymmetricKey, digest: SHA256.Digest)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/digest","title":"let digest: Data","type":"property"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/key","title":"let key: Data","type":"property"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/mackey","title":"let macKey: Data","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/digest","title":"case digest","type":"case"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/key","title":"case key","type":"case"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/mackey","title":"case macKey","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/ciphermetadata\/keys","title":"CipherMetadata.Keys","type":"enum"}],"path":"\/documentation\/dxprotocol\/ciphermetadata","title":"CipherMetadata","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/cryptoerror\/init(code:)","title":"init(code: Int)","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/cryptoerror\/digestmismatch","title":"static var digestMismatch: CryptoError","type":"property"},{"path":"\/documentation\/dxprotocol\/cryptoerror\/invalidauthenticationcode","title":"static var invalidAuthenticationCode: CryptoError","type":"property"},{"path":"\/documentation\/dxprotocol\/cryptoerror\/invalidinputfiledata","title":"static var invalidInputFileData: CryptoError","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/cryptoerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/dxprotocol\/cryptoerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/cryptoerror","title":"CryptoError","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/cryptoservice\/qccaespadcbcdecrypt(key:initializationvector:cyphertext:)","title":"func QCCAESPadCBCDecrypt(key: [UInt8], initializationVector: [UInt8], cyphertext: [UInt8]) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoservice\/qccaespadcbcencrypt(key:initializationvector:plaintext:)","title":"func QCCAESPadCBCEncrypt(key: [UInt8], initializationVector: [UInt8], plaintext: [UInt8]) throws -> [UInt8]","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoservice\/derivekey(inputkeymaterial:info:outputbytecount:)","title":"func deriveKey(inputKeyMaterial: Data, info: Data, outputByteCount: Int) -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoservice\/derivekey(inputkeymaterial:salt:info:outputbytecount:)","title":"func deriveKey(inputKeyMaterial: Data, salt: Data, info: Data, outputByteCount: Int) -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoservice\/generateprivatekeyrawdata()","title":"func generatePrivateKeyRawData() -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoservice\/hmacsha256(for:with:)","title":"func hmacSHA256(for: Data, with: Data) -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoservice\/isvalidsignature(_:for:publickey:)","title":"func isValidSignature(Data, for: Data, publicKey: Data) throws -> Bool","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoservice\/performkeyagreement(of:with:)","title":"func performKeyAgreement(of: Data, with: Data) throws -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoservice\/publicagreementkeydatafor(privatekeydata:)","title":"func publicAgreementKeyDataFor(privateKeyData: Data) throws -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoservice\/publicsigningkeydatafor(privatekeydata:)","title":"func publicSigningKeyDataFor(privateKeyData: Data) throws -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptoservice\/signature(for:with:)","title":"func signature(for: Data, with: Data) throws -> Data","type":"method"}],"path":"\/documentation\/dxprotocol\/cryptoservice","title":"CryptoService","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeypair\/init()","title":"init() throws","type":"init"},{"path":"\/documentation\/dxprotocol\/identitykeypair\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/dxprotocol\/identitykeypair\/init(publickey:privatekey:signingpublickey:)","title":"init(publicKey: PublicKey, privateKey: PrivateKey, signingPublicKey: PublicKey)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeypair\/identitykey","title":"var identityKey: IdentityKeyPublic","type":"property"},{"path":"\/documentation\/dxprotocol\/identitykeypair\/privatekey","title":"let privateKey: PrivateKey","type":"property"},{"path":"\/documentation\/dxprotocol\/identitykeypair\/publickey","title":"let publicKey: PublicKey","type":"property"},{"path":"\/documentation\/dxprotocol\/identitykeypair\/signingkey","title":"var signingKey: SigningKeyPublic","type":"property"},{"path":"\/documentation\/dxprotocol\/identitykeypair\/signingpublickey","title":"let signingPublicKey: PublicKey","type":"property"}],"path":"\/documentation\/dxprotocol\/identitykeypair","title":"IdentityKeyPair","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/==(_:_:)","title":"static func == (IdentityKeyPublic, IdentityKeyPublic) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/init(publickey:)","title":"init(publicKey: PublicKey)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/data","title":"var data: Data","type":"property"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/publickey","title":"let publicKey: PublicKey","type":"property"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/type","title":"var type: CryptoType","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys\/publickey","title":"case publicKey","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/identitykeypublic\/codingkeys","title":"IdentityKeyPublic.CodingKeys","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/identitykeypublic\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/identitykeypublic\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/identitykeypublic","title":"IdentityKeyPublic","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/keypair\/init()","title":"init() throws","type":"init"},{"path":"\/documentation\/dxprotocol\/keypair\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/dxprotocol\/keypair\/init(publickey:privatekey:)","title":"init(publicKey: PublicKey, privateKey: PrivateKey)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/keypair\/privatekey","title":"let privateKey: PrivateKey","type":"property"},{"path":"\/documentation\/dxprotocol\/keypair\/publickey","title":"let publicKey: PublicKey","type":"property"}],"path":"\/documentation\/dxprotocol\/keypair","title":"KeyPair","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypair\/init()","title":"init() throws","type":"init"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypair\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypair\/init(id:publickey:privatekey:)","title":"init(id: UUID, publicKey: PublicKey, privateKey: PrivateKey)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypair\/id","title":"let id: UUID","type":"property"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypair\/privatekey","title":"let privateKey: PrivateKey","type":"property"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypair\/publickey","title":"let publicKey: PublicKey","type":"property"}],"path":"\/documentation\/dxprotocol\/onetimeprekeypair","title":"OneTimePreKeyPair","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/init(id:publickey:)","title":"init(id: UUID, publicKey: PublicKey)","type":"init"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/init(onetimeprekeypair:)","title":"init(oneTimePreKeyPair: OneTimePreKeyPair)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/data","title":"var data: Data","type":"property"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/id","title":"let id: UUID","type":"property"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/publickey","title":"let publicKey: PublicKey","type":"property"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/type","title":"var type: CryptoType","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/clientkeyid","title":"case clientKeyId","type":"case"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/key","title":"case key","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/keys","title":"OneTimePreKeyPublic.Keys","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/dxprotocol\/onetimeprekeypublic\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/onetimeprekeypublic","title":"OneTimePreKeyPublic","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/init(identitykey:signingkey:registrationid:deviceid:signedprekey:onetimeprekey:)","title":"init(identityKey: IdentityKeyPublic, signingKey: SigningKeyPublic, registrationId: UUID, deviceId: UUID, signedPreKey: SignedPreKeyPublic, oneTimePreKey: OneTimePreKeyPublic?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/deviceid","title":"let deviceId: UUID","type":"property"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/identitykey","title":"let identityKey: IdentityKeyPublic","type":"property"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/onetimeprekey","title":"let oneTimePreKey: OneTimePreKeyPublic?","type":"property"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/registrationid","title":"let registrationId: UUID","type":"property"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/signedprekey","title":"let signedPreKey: SignedPreKeyPublic","type":"property"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/signingkey","title":"let signingKey: SigningKeyPublic","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/deviceid","title":"case deviceId","type":"case"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/identitykey","title":"case identityKey","type":"case"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/onetimeprekey","title":"case oneTimePreKey","type":"case"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/signedprekey","title":"case signedPreKey","type":"case"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/signingkey","title":"case signingKey","type":"case"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/userid","title":"case userId","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dxprotocol\/prekeybundle\/keys\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/prekeybundle\/keys","title":"PreKeyBundle.Keys","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/dxprotocol\/prekeybundle\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeybundle\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/dxprotocol\/prekeybundle\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/prekeybundle","title":"PreKeyBundle","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeysecuremessage\/init(data:)","title":"init(data: Data) throws","type":"init"},{"path":"\/documentation\/dxprotocol\/prekeysecuremessage\/init(messageversion:registrationid:onetimeprekeyid:signedprekeyid:senderbasekey:senderidentitykey:securemessage:)","title":"init(messageVersion: UInt8, registrationId: UUID?, oneTimePreKeyId: UUID?, signedPreKeyId: UUID, senderBaseKey: PublicKey, senderIdentityKey: IdentityKeyPublic, secureMessage: SecureMessage) throws","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/prekeysecuremessage\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/dxprotocol\/prekeysecuremessage\/==(_:_:)","title":"static func == (PreKeySecureMessage, PreKeySecureMessage) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/prekeysecuremessage\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/prekeysecuremessage","title":"PreKeySecureMessage","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/privatekey\/==(_:_:)","title":"static func == (PrivateKey, PrivateKey) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/privatekey\/init()","title":"init()","type":"init"},{"path":"\/documentation\/dxprotocol\/privatekey\/init(data:type:)","title":"init(data: Data, type: CryptoType) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/privatekey\/calculatekeyagreement(with:)","title":"func calculateKeyAgreement(with: PublicKey) throws -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/privatekey\/getagreementpublickey()","title":"func getAgreementPublicKey() throws -> PublicKey","type":"method"},{"path":"\/documentation\/dxprotocol\/privatekey\/getsigningpublickey()","title":"func getSigningPublicKey() throws -> PublicKey","type":"method"},{"path":"\/documentation\/dxprotocol\/privatekey\/signature(for:)","title":"func signature(for: Data) throws -> Data","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/privatekey\/keys\/data","title":"case data","type":"case"},{"path":"\/documentation\/dxprotocol\/privatekey\/keys\/type","title":"case type","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/privatekey\/keys\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/dxprotocol\/privatekey\/keys\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/dxprotocol\/privatekey\/keys\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/privatekey\/keys\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/dxprotocol\/privatekey\/keys\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/dxprotocol\/privatekey\/keys\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/privatekey\/keys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/privatekey\/keys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/privatekey\/keys\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/privatekey\/keys\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dxprotocol\/privatekey\/keys\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/privatekey\/keys","title":"PrivateKey.Keys","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/privatekey\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/dxprotocol\/privatekey\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/privatekey\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/dxprotocol\/privatekey\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/privatekey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/privatekey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/privatekey","title":"PrivateKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/protocoladdress\/init(userid:deviceid:)","title":"init(userId: UUID, deviceId: UUID)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/protocoladdress\/deviceid","title":"let deviceId: UUID","type":"property"},{"path":"\/documentation\/dxprotocol\/protocoladdress\/userid","title":"let userId: UUID","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/protocoladdress\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/dxprotocol\/protocoladdress\/==(_:_:)","title":"static func == (ProtocolAddress, ProtocolAddress) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/protocoladdress\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/protocoladdress\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dxprotocol\/protocoladdress\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/protocoladdress","title":"ProtocolAddress","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publickey\/init(data:type:)","title":"init(data: Data, type: CryptoType) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publickey\/data","title":"let data: Data","type":"property"},{"path":"\/documentation\/dxprotocol\/publickey\/type","title":"let type: CryptoType","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publickey\/keys\/data","title":"case data","type":"case"},{"path":"\/documentation\/dxprotocol\/publickey\/keys\/type","title":"case type","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publickey\/keys\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/dxprotocol\/publickey\/keys\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/dxprotocol\/publickey\/keys\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publickey\/keys\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/dxprotocol\/publickey\/keys\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/dxprotocol\/publickey\/keys\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publickey\/keys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/publickey\/keys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publickey\/keys\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publickey\/keys\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dxprotocol\/publickey\/keys\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/publickey\/keys","title":"PublicKey.Keys","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publickey\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/dxprotocol\/publickey\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publickey\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/dxprotocol\/publickey\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publickey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/dxprotocol\/publickey\/==(_:_:)","title":"static func == (PublicKey, PublicKey) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/publickey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/publickey","title":"PublicKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/init(identitykey:signingkey:signedprekey:onetimeprekeys:)","title":"init(identityKey: IdentityKeyPublic, signingKey: SigningKeyPublic, signedPreKey: SignedPreKeyPublic, oneTimePreKeys: [OneTimePreKeyPublic])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/identitykey","title":"let identityKey: IdentityKeyPublic","type":"property"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/onetimeprekeys","title":"let oneTimePreKeys: [OneTimePreKeyPublic]","type":"property"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/signedprekey","title":"let signedPreKey: SignedPreKeyPublic","type":"property"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/signingkey","title":"let signingKey: SigningKeyPublic","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/identitykey","title":"case identityKey","type":"case"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/onetimeprekeys","title":"case oneTimePreKeys","type":"case"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/signedprekey","title":"case signedPreKey","type":"case"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/signingkey","title":"case signingKey","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/publicprekeysbundle\/codingkeys","title":"PublicPreKeysBundle.CodingKeys","type":"enum"}],"path":"\/documentation\/dxprotocol\/publicprekeysbundle","title":"PublicPreKeysBundle","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/securemessage\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/dxprotocol\/securemessage\/==(_:_:)","title":"static func == (SecureMessage, SecureMessage) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/securemessage\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/securemessage","title":"SecureMessage","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/session\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/session\/encrypt(data:for:sessionstore:identitystore:)","title":"func encrypt(data: Data, for: ProtocolAddress, sessionStore: SessionStorable, identityStore: IdentityKeyStorable) throws -> MessageContainer","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/session\/decrypt(message:from:sessionstore:identitystore:prekeystore:signedprekeystore:)","title":"static func decrypt(message: MessageContainer, from: ProtocolAddress, sessionStore: SessionStorable, identityStore: IdentityKeyStorable, preKeyStore: PreKeyStorable, signedPreKeyStore: SignedPreKeyStorable) throws -> Data","type":"method"},{"path":"\/documentation\/dxprotocol\/session\/processprekeybundle(_:for:sessionstore:identitystore:)","title":"static func processPreKeyBundle(PreKeyBundle, for: ProtocolAddress, sessionStore: SessionStorable, identityStore: IdentityKeyStorable) throws -> Session","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/session\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/dxprotocol\/session\/==(_:_:)","title":"static func == (Session, Session) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/session\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/session","title":"Session","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeypair\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/dxprotocol\/signedprekeypair\/init(id:date:publickey:privatekey:signature:)","title":"init(id: UUID, date: Date, publicKey: PublicKey, privateKey: PrivateKey, signature: Data)","type":"init"},{"path":"\/documentation\/dxprotocol\/signedprekeypair\/init(identitykeypair:)","title":"init(identityKeyPair: IdentityKeyPair) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeypair\/date","title":"let date: Date","type":"property"},{"path":"\/documentation\/dxprotocol\/signedprekeypair\/id","title":"let id: UUID","type":"property"},{"path":"\/documentation\/dxprotocol\/signedprekeypair\/privatekey","title":"let privateKey: PrivateKey","type":"property"},{"path":"\/documentation\/dxprotocol\/signedprekeypair\/publickey","title":"let publicKey: PublicKey","type":"property"},{"path":"\/documentation\/dxprotocol\/signedprekeypair\/signature","title":"let signature: Data","type":"property"}],"path":"\/documentation\/dxprotocol\/signedprekeypair","title":"SignedPreKeyPair","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/init(id:publickey:signature:)","title":"init(id: UUID, publicKey: PublicKey, signature: Data)","type":"init"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/init(signedprekeypair:)","title":"init(signedPreKeyPair: SignedPreKeyPair)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/data","title":"var data: Data","type":"property"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/id","title":"let id: UUID","type":"property"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/publickey","title":"let publicKey: PublicKey","type":"property"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/signature","title":"let signature: Data","type":"property"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/type","title":"var type: CryptoType","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/clientkeyid","title":"case clientKeyId","type":"case"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/key","title":"case key","type":"case"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/signature","title":"case signature","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/signedprekeypublic\/keys","title":"SignedPreKeyPublic.Keys","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/dxprotocol\/signedprekeypublic\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signedprekeypublic\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/dxprotocol\/signedprekeypublic\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/signedprekeypublic","title":"SignedPreKeyPublic","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/==(_:_:)","title":"static func == (SigningKeyPublic, SigningKeyPublic) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/init(publickey:)","title":"init(publicKey: PublicKey)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/publickey","title":"let publicKey: PublicKey","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/verifysignature(_:for:)","title":"func verifySignature(Data, for: Data) throws -> Bool","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys\/publickey","title":"case publicKey","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/signingkeypublic\/codingkeys","title":"SigningKeyPublic.CodingKeys","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/signingkeypublic\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/signingkeypublic\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/signingkeypublic","title":"SigningKeyPublic","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/publishprekeysrequest","title":"PublishPreKeysRequest","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/cryptotype\/curve25519","title":"case curve25519","type":"case"},{"path":"\/documentation\/dxprotocol\/cryptotype\/p256","title":"case p256","type":"case"},{"path":"\/documentation\/dxprotocol\/cryptotype\/p512","title":"case p512","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/cryptotype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/cryptotype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/cryptotype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/cryptotype\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/cryptotype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/cryptotype\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/dxprotocol\/cryptotype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dxprotocol\/cryptotype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/cryptotype","title":"CryptoType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/dxerror\/callbackerror(_:)","title":"case callbackError(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/duplicatedmessage(_:)","title":"case duplicatedMessage(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/fingerprintparsingerror(_:)","title":"case fingerprintParsingError(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/fingerprintversionmismatch(_:)","title":"case fingerprintVersionMismatch(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/internalerror(_:)","title":"case internalError(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/invalidargument(_:)","title":"case invalidArgument(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/invalidkey(_:)","title":"case invalidKey(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/invalidkeydata(_:)","title":"case invalidKeyData(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/invalidkeydatalength(_:)","title":"case invalidKeyDataLength(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/invalidkeyidentifier(_:)","title":"case invalidKeyIdentifier(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/invalidmessage(_:)","title":"case invalidMessage(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/invalidsenderkeysession(distributionid:message:)","title":"case invalidSenderKeySession(distributionId: UUID, message: String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/invalidsession(_:)","title":"case invalidSession(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/invalidsignature(_:)","title":"case invalidSignature(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/invalidstate(_:)","title":"case invalidState(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/invalidtype(_:)","title":"case invalidType(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/invalidutf8string(_:)","title":"case invalidUtf8String(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/legacyciphertextversion(_:)","title":"case legacyCiphertextVersion(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/nullparameter(_:)","title":"case nullParameter(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/protobuferror(_:)","title":"case protobufError(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/sealedsenderselfsend(_:)","title":"case sealedSenderSelfSend(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/sessionnotfound(_:)","title":"case sessionNotFound(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/unknown(_:_:)","title":"case unknown(UInt32, String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/unknownciphertextversion(_:)","title":"case unknownCiphertextVersion(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/unrecognizedmessageversion(_:)","title":"case unrecognizedMessageVersion(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/untrustedidentity(_:)","title":"case untrustedIdentity(String)","type":"case"},{"path":"\/documentation\/dxprotocol\/dxerror\/verificationfailed(_:)","title":"case verificationFailed(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/dxerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/dxerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/dxerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/dxprotocol\/dxerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/dxerror","title":"DXError","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/dxprotocolconstants\/chunksize","title":"static let chunkSize: Int","type":"property"},{"path":"\/documentation\/dxprotocol\/dxprotocolconstants\/hmac256length","title":"static let hmac256Length: Int","type":"property"},{"path":"\/documentation\/dxprotocol\/dxprotocolconstants\/onetimeprekeydeletioninterval","title":"static let oneTimePreKeyDeletionInterval: TimeInterval","type":"property"},{"path":"\/documentation\/dxprotocol\/dxprotocolconstants\/onetimeprekeyscheckinterval","title":"static let oneTimePreKeysCheckInterval: TimeInterval","type":"property"},{"path":"\/documentation\/dxprotocol\/dxprotocolconstants\/onetimeprekeyslimit","title":"static let oneTimePreKeysLimit: Int","type":"property"},{"path":"\/documentation\/dxprotocol\/dxprotocolconstants\/onetimeprekeysmincount","title":"static let oneTimePreKeysMinCount: Int","type":"property"},{"path":"\/documentation\/dxprotocol\/dxprotocolconstants\/signedprekeydeletioninterval","title":"static let signedPreKeyDeletionInterval: TimeInterval","type":"property"},{"path":"\/documentation\/dxprotocol\/dxprotocolconstants\/signedprekeyupdateinterval","title":"static let signedPreKeyUpdateInterval: TimeInterval","type":"property"},{"path":"\/documentation\/dxprotocol\/dxprotocolconstants\/signedprekeyupdatemaxfailurecount","title":"static let signedPreKeyUpdateMaxFailureCount: Int","type":"property"},{"path":"\/documentation\/dxprotocol\/dxprotocolconstants\/signedprekeyupdatemaxfailureduration","title":"static let signedPreKeyUpdateMaxFailureDuration: TimeInterval","type":"property"}],"path":"\/documentation\/dxprotocol\/dxprotocolconstants","title":"DXProtocolConstants","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/directiontype\/receiving","title":"case receiving","type":"case"},{"path":"\/documentation\/dxprotocol\/directiontype\/sending","title":"case sending","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/directiontype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/directiontype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/directiontype","title":"DirectionType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/prekeysecuremessage(_:)","title":"case preKeySecureMessage(PreKeySecureMessage)","type":"case"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/securemessage(_:)","title":"case secureMessage(SecureMessage)","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/prekeysecuremessage","title":"case preKeySecureMessage","type":"case"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/securemessage","title":"case secureMessage","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/dxprotocol\/messagecontainer\/keys\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/messagecontainer\/keys","title":"MessageContainer.Keys","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/dxprotocol\/messagecontainer\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/dxprotocol\/messagecontainer\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/dxprotocol\/messagecontainer\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/dxprotocol\/messagecontainer","title":"MessageContainer","type":"enum"}],"path":"\/documentation\/dxprotocol","title":"DXProtocol","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}